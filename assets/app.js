angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(o,t){o.$on("login",function(t,n){o.currentUser=n}),o.logout=function(){t.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("login",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){o.addPost=function(){o.postBody&&t.create({username:"unknown",body:o.postBody}).success(function(){o.postBody=null})},t.fetch().success(function(t){o.posts=t}),o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,t){o.register=function(o,n){t.register(o,n)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.logout=function(){o.defaults.headers.common["X-Auth"]=""},t.register=function(t,n){return o.post("/api/users",{username:t,password:n}).then(function(o){console.log(o)})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){!function n(){var e="ws://localhost:8081",r=new WebSocket(e);r.onclose=function(){console.log("WebSocket closed. Reconnecting..."),t(n,1e4)},r.onmessage=function(t){var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlVzZXJTdmMiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwibG9nb3V0IiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsImZldGNoIiwicG9zdHMiLCJwb3N0IiwiJGFwcGx5IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiY29uc29sZSIsImxvZyIsInJ1biIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsImNvbm5lY3QiLCJ1cmwiLCJjb25uZWN0aW9uIiwiV2ViU29ja2V0Iiwib25jbG9zZSIsIm9ubWVzc2FnZSIsImUiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiJGJyb2FkY2FzdCIsInRvcGljIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQUUsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FKLEVBQUFLLFlBQUFELElBRUFKLEVBQUFNLE9BQUEsV0FDQUwsRUFBQUssYUNOQVQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFDLEdBQ0FELEVBQUFPLE1BQUEsU0FBQUMsRUFBQUMsR0FDQVIsRUFBQU0sTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBWCxFQUFBWSxNQUFBLFFBQUFELEVBQUFFLFlDTEFoQixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQWMsR0FDQWQsRUFBQWUsUUFBQSxXQUNBZixFQUFBZ0IsVUFDQUYsRUFBQUcsUUFDQVQsU0FBQSxVQUNBVSxLQUFBbEIsRUFBQWdCLFdBQ0FHLFFBQUEsV0FDQW5CLEVBQUFnQixTQUFBLFFBS0FGLEVBQUFNLFFBQUFELFFBQUEsU0FBQUUsR0FDQXJCLEVBQUFxQixNQUFBQSxJQUdBckIsRUFBQUUsSUFBQSxjQUFBLFNBQUFDLEVBQUFtQixHQUNBdEIsRUFBQXVCLE9BQUEsV0FDQXZCLEVBQUFxQixNQUFBRyxRQUFBRixVQ25CQXpCLFFBQUFDLE9BQUEsT0FDQTJCLFFBQUEsWUFBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUFQLE1BQUEsV0FDQSxNQUFBTSxHQUFBRSxJQUFBLGVBRUFELEtBQUFWLE9BQUEsU0FBQUssR0FDQSxNQUFBSSxHQUFBSixLQUFBLGFBQUFBLE9DTkF6QixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFDLEdBQ0FELEVBQUE2QixTQUFBLFNBQUFyQixFQUFBQyxHQUNBUixFQUFBNEIsU0FBQXJCLEVBQUFDLE9DSEFaLFFBQUFDLE9BQUEsT0FDQWdDLFFBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUFBakMsV0FBQSxZQUFBa0MsWUFBQSxlQUNBRCxLQUFBLGFBQUFqQyxXQUFBLGVBQUFrQyxZQUFBLGtCQUNBRCxLQUFBLFVBQUFqQyxXQUFBLFlBQUFrQyxZQUFBLGtCQ0xBcEMsUUFBQUMsT0FBQSxPQUNBMkIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBUSxHQUFBUCxJQUNBTyxHQUFBQyxRQUFBLFdBQ0EsTUFBQVQsR0FBQUUsSUFBQSxlQUVBTSxFQUFBM0IsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFpQixHQUFBSixLQUFBLGlCQUNBZCxTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUEwQixHQUdBLE1BRkFGLEdBQUFHLE1BQUFELEVBQUF2QixLQUNBYSxFQUFBWSxTQUFBQyxRQUFBQyxPQUFBLFVBQUFKLEVBQUF2QixLQUNBcUIsRUFBQUMsYUFHQUQsRUFBQTVCLE9BQUEsV0FDQW9CLEVBQUFZLFNBQUFDLFFBQUFDLE9BQUEsVUFBQSxJQUVBTixFQUFBTCxTQUFBLFNBQUFyQixFQUFBQyxHQUNBLE1BQUFpQixHQUFBSixLQUFBLGNBQ0FkLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsU0FBQTBCLEdBQ0FLLFFBQUFDLElBQUFOLFNDdEJBdkMsUUFBQUMsT0FBQSxPQUNBNkMsS0FBQSxhQUFBLFdBQUEsU0FBQUMsRUFBQUMsSUFDQSxRQUFBQyxLQUNBLEdBQUFDLEdBQUEsc0JBQ0FDLEVBQUEsR0FBQUMsV0FBQUYsRUFDQUMsR0FBQUUsUUFBQSxXQUNBVCxRQUFBQyxJQUFBLHFDQUNBRyxFQUFBQyxFQUFBLE1BRUFFLEVBQUFHLFVBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBQyxLQUFBQyxNQUFBSCxFQUFBdkMsS0FDQStCLEdBQUFZLFdBQUEsTUFBQUgsRUFBQUksTUFBQUosRUFBQXhDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdCduZ1JvdXRlJ1xuXSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMpIHtcblx0JHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJcblx0fSk7XG5cdCRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0VXNlclN2Yy5sb2dvdXQoKTtcblx0fTtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHRcdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdFx0XHQkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcblx0XHRcdFx0fSlcblx0XHR9XG5cdH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcbiAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XG4gICAgICAgIHVzZXJuYW1lOiAndW5rbm93bicsXG4gICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAkc2NvcGUucG9zdHMgPSBwb3N0c1xuICB9KTtcblxuXHQkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uIChfLCBwb3N0KSB7XG5cdFx0JHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG5cdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuXHRcdH0pXG5cdH0pO1xuXG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXG4gIH1cbiAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHRcdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKTtcblx0XHR9XG5cdH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuXHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0XHQud2hlbignLycsIHsgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCcgfSlcblx0XHRcdC53aGVuKCcvcmVnaXN0ZXInLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnIH0pXG5cdFx0XHQud2hlbignL2xvZ2luJywgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyB9KVxuXHR9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcblx0XHR2YXIgc3ZjID0gdGhpcztcblx0XHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcblx0XHR9O1xuXHRcdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdFx0fSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRcdHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xuXHRcdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcblx0XHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHRcdHN2Yy5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSBcIlwiO1xuXHRcdH07XG5cdFx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0Y29uc29sZS5sb2codmFsKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdGltZW91dCkge1xuXHRcdChmdW5jdGlvbiBjb25uZWN0KCkge1xuXHRcdFx0dmFyIHVybCA9ICd3czovL2xvY2FsaG9zdDo4MDgxJztcblx0XHRcdHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuXHRcdFx0Y29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1dlYlNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xuXHRcdFx0XHQkdGltZW91dChjb25uZWN0LCAxMCoxMDAwKVxuXHRcdFx0fTtcblx0XHRcdGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0dmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG5cdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSlcblx0XHRcdH1cblx0XHR9KSgpXG5cdH0pO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=